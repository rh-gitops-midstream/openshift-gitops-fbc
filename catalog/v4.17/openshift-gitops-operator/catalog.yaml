---
defaultChannel: stable-v1.15
name: openshift-gitops-operator
schema: olm.package
---
entries:
  - name: openshift-gitops-operator.v1.12.5-0.1727371523.p
  - name: openshift-gitops-operator.v1.12.6
    skips:
      - openshift-gitops-operator.v1.12.5-0.1727371523.p
  - name: openshift-gitops-operator.v1.13.2
  - name: openshift-gitops-operator.v1.13.3
    replaces: openshift-gitops-operator.v1.12.6
    skips:
      - openshift-gitops-operator.v1.12.6
      - openshift-gitops-operator.v1.13.2
  - name: openshift-gitops-operator.v1.14.0
  - name: openshift-gitops-operator.v1.14.1
  - name: openshift-gitops-operator.v1.14.2
    replaces: openshift-gitops-operator.v1.13.3
    skips:
      - openshift-gitops-operator.v1.13.3
      - openshift-gitops-operator.v1.14.0
      - openshift-gitops-operator.v1.14.1
  - name: openshift-gitops-operator.v1.15.0
    replaces: openshift-gitops-operator.v1.14.2
    skips:
      - openshift-gitops-operator.v1.14.2
    skipRange: '>=1.12.5-0.1727371523.p <1.12.5-0.1727371523.p'
name: stable-v1
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.12.5-0.1727371523.p
  - name: openshift-gitops-operator.v1.12.6
    skips:
      - openshift-gitops-operator.v1.12.5-0.1727371523.p
    skipRange: '>=1.12.5-0.1727371523.p <1.12.5-0.1727371523.p'
name: stable-v1.12
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.13.2
  - name: openshift-gitops-operator.v1.13.3
    skips:
      - openshift-gitops-operator.v1.13.2
    skipRange: '>=1.12.5-0.1727371523.p <1.13.2'
name: stable-v1.13
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.14.0
  - name: openshift-gitops-operator.v1.14.1
  - name: openshift-gitops-operator.v1.14.2
    skips:
      - openshift-gitops-operator.v1.14.0
      - openshift-gitops-operator.v1.14.1
    skipRange: '>=1.12.5-0.1727371523.p <1.14.0'
name: stable-v1.14
package: openshift-gitops-operator
schema: olm.channel
---
entries:
  - name: openshift-gitops-operator.v1.15.0
    skipRange: '>=1.12.5-0.1727371523.p <1.15.0'
name: stable-v1.15
package: openshift-gitops-operator
schema: olm.channel
---
image: @sha256:7977eecb1dc05d639e94c84715ea2a5ced158508524ed0c8487dd3da3fa51fde
name: openshift-gitops-operator.v1.12.5-0.1727371523.p
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.12.5+0.1727371523.p
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:331a51781c974793ac2658029eb39ee59d182cf23ee81d40c0882e657a643fd2
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        olm.substitutesFor: openshift-gitops-operator.v1.12.5
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.10.0+git
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.10.16\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.openshift.com/container-platform/4.10/cicd/gitops/gitops-release-notes.html
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:0b88e9a0f02fef6334f173e71588302fdd08e675f372d0f3fd445b61f6e7e7d9
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:217c92bca577ece7d2ea856e4d9fa1dcd9325e326733676519084a13e3241433
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:1a2b824ba334ec626a77502883f24e4e6568ed53924b244c724a39128ce4e979
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:ae1469bf6338d773b25db8b2e5fa948787051dc248f8221b0714690407b0ecfc
    name: argocd_dex_image
  - image: @sha256:7977eecb1dc05d639e94c84715ea2a5ced158508524ed0c8487dd3da3fa51fde
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:331a51781c974793ac2658029eb39ee59d182cf23ee81d40c0882e657a643fd2
    name: gitops-rhel8-operator-331a51781c974793ac2658029eb39ee59d182cf23ee81d40c0882e657a643fd2-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:331a51781c974793ac2658029eb39ee59d182cf23ee81d40c0882e657a643fd2
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:91c0eb12e0e2301d1478466a7fc20195376b4cf30f214e7a73316379ac5c489a
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:375d0194331d65b8b3ed65a9d7677d6c604b4e10ae23a0f500c9b61908a84aa8
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:e65cced9d391485ab8836c7e3f32dced228fe1e55a37eab37d17576075535612
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:20566173a8e907980e603d82fae4d96fcdfd5c43d9004c2e506cf0e09a47b91e
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:0b926fc9eae775425faa1ab9709a36fdac15afe4bfe523720e17ecf5df45bb28
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:c4a98010f7dd5faec2047bb9803061704233a8efc930be2a02386ac16d062d86
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:80198f65f7e3f9022a34e0342e9423807b855dcb7bda810172eebc9a27afb5c2
name: openshift-gitops-operator.v1.12.6
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.12.6
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:48dd1254fd3a887aef2eae9239f68637eae18514a50f72ea504414d83dc727b8
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.10.0+git
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.10.18\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.openshift.com/container-platform/4.10/cicd/gitops/gitops-release-notes.html
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:33bbb88343285a0510670384b87d0226dd6de8aa12c78b68921362c4d6f5a6aa
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:dbf3038daf7c797123c511f9a609c3485cb1a5bcae53c614fad17e0a65fa7ee3
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:b5736d1106db29fcdf42328ca20b96382d4339f90b97a07120ea73ee174ea1ad
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:7d82c719b1cef64607d30e8aaa5ab293955771c5b1dbd430e0befc988a43356d
    name: argocd_dex_image
  - image: @sha256:80198f65f7e3f9022a34e0342e9423807b855dcb7bda810172eebc9a27afb5c2
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:48dd1254fd3a887aef2eae9239f68637eae18514a50f72ea504414d83dc727b8
    name: gitops-rhel8-operator-48dd1254fd3a887aef2eae9239f68637eae18514a50f72ea504414d83dc727b8-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:48dd1254fd3a887aef2eae9239f68637eae18514a50f72ea504414d83dc727b8
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:73918f3b3c507fc64006b7a500ecfa9d58151d694852f696c41a4412edffc78e
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:1cf485a889c7586cb4944f000b53c0e97d08f97ba14e580bec57dad7cb13712e
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:a1d4e26ea755181818401697f18260b9e876aa441be14830f9142081ee22a24d
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9e0fee30842a16d7b8a39d336123c80c5271cb2ceb50759fc7ee51a4ed09ceb3
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:0e41fde95f2b68ce8c359e4370accb1f5526382ce415a6b9eba8cdf18e188c94
name: openshift-gitops-operator.v1.13.2
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.13.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:4776717e81841f83eb8d457b2f3354a173700de9845715ef7dc64673d97b6587
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.22.2
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.11.11\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:a60f1cfc0f23f7bf3bb58d269d4331696040e11cc384abefb7e7d62af84d88c0
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:772000bbd1f29a97f30e260f69601405352ef4ad7cac8ae283072213314016c9
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:1ba28c7afc98166ffd35ab46f774019defc54178c72ed3f104e43f079fc9d625
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:51ab4e9adf371488686dbc36edb6c4746eb1bd9ee4eff3c5f8bee1971b64ee33
    name: argocd_dex_image
  - image: @sha256:0e41fde95f2b68ce8c359e4370accb1f5526382ce415a6b9eba8cdf18e188c94
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:4776717e81841f83eb8d457b2f3354a173700de9845715ef7dc64673d97b6587
    name: gitops-rhel8-operator-4776717e81841f83eb8d457b2f3354a173700de9845715ef7dc64673d97b6587-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:4776717e81841f83eb8d457b2f3354a173700de9845715ef7dc64673d97b6587
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:25a23ccac65704d70adcf7c639d32dd8812e9a01ac171bb18c22d24c2bdc4a92
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:679ebf25f149f25e979cfb113817342579e899ea6e6d92c9b7d43a66a3a143d2
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:40d0ac2a7c8e8d2ca3ef711608981ef11186c114b62b6befaa147d9fd4ea0865
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9e0fee30842a16d7b8a39d336123c80c5271cb2ceb50759fc7ee51a4ed09ceb3
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:1fa8301afa977b08c548719f3f8a58a9efc0f3987b7722334ccbd9514727d88b
name: openshift-gitops-operator.v1.13.3
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.13.3
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:d41034bcf5c28bcb8afef08678793d0cc27a4032e2811a0c496c3bd0f10ecc17
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.22.2
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.11.12\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:c301c8cb4e9abe8ee4631c46eaf90d27a1174662a34f34c51776f0f4c22888f9
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:066eae4a541079fbba91dea0652bdb12d3e981d5a225d0827e61f49faff067d3
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:82c4833d40e13f9f8d7a85df3cfd2cfbdbc44728f3c6489da71b9409bfdb05d8
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:e87515d016565bb69cb2c2ac40432e0127dd2cb20a490ac82019836032ba15e5
    name: argocd_dex_image
  - image: @sha256:1fa8301afa977b08c548719f3f8a58a9efc0f3987b7722334ccbd9514727d88b
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:d41034bcf5c28bcb8afef08678793d0cc27a4032e2811a0c496c3bd0f10ecc17
    name: gitops-rhel8-operator-d41034bcf5c28bcb8afef08678793d0cc27a4032e2811a0c496c3bd0f10ecc17-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:d41034bcf5c28bcb8afef08678793d0cc27a4032e2811a0c496c3bd0f10ecc17
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:c02dc2c79ee24ce5450ea4e19493ac2a1997eeb5bfd359291642c529826d0cdd
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:ef72b042da843c46cefe4942a08906fc0afc24c04e064384c40656331c404741
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:bde11fa83b7e708677b08ea995041f480b88edfb93e4a62c10380d101c0a349c
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:3f2804bc2af437ff1f06c214b48a1a780dfcfab995650d901c03270057eb9f3c
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:610437902999bf406e6284a1f587e055e4ccc36cc4f83f3cf5aec2981843698b
name: openshift-gitops-operator.v1.14.0
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
        createdAt: "2024-09-13 17:23:26"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: '>=1.0.0 <1.14.0'
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD stable\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.openshift.com/container-platform/4.10/cicd/gitops/gitops-release-notes.html
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:44475429eb08f0acfb08c35e65bd2870535634cf76156b870a3585b1cd4c8b30
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:383963899a0c606386475f56adee23fc9c43f02a3fa817845d683e68b2ec8360
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:b022c3859eb6bb5de60ce9760d0d9a23617bc9906a3487969c45604f9aeb5acc
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:bae83c4de42d55ca49cb443c0cbfb39a8318487d6d568a6aae03ca0b583eda64
    name: argocd_dex_image
  - image: @sha256:610437902999bf406e6284a1f587e055e4ccc36cc4f83f3cf5aec2981843698b
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
    name: gitops-rhel8-operator-91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:91588806c263e3cc10c5245c89785234b1d0fe44e04ee0c2645f30c34ccab3ea
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:7be504945c8b7ce6b7b6f232309f3fe15b8e78d8003ab6655523541c03309cab
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:56f22d670b05fee32e91f0fbd5925b55351b4f6df621bc40b2719427df9df93b
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:71c2a5a88f0b4d5f93cb669cc6d900d71ffb70d87b70b1f90bdfc909fabacb9b
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:f288292071ec742e0c420cc19b8abe0ab5d95c447f01ce800bf5bf434270b616
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:53daa863b16b421cc1d9bc7e042cf1ecce9de9913b978561145b319c2a1a8ae5
name: openshift-gitops-operator.v1.14.1
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
        createdAt: "2024-10-22 16:09:59"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD stable\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:f8106135dc58898f6b81d36e9158a192272e600d1db69ae207cb97dcd4eccb6f
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:97914aa40ad6bc2f01e3eaac4448fbebe0ea0cb0f971b11f69581d545618fe8e
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:df64830277b275211c369cf7f51cddf9cc1d753b1a78be42b2dcb1eddd2aba60
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:9116e1adc24db19136ea34b8faeba3b1003228621d81b716cbe4ec4d61ad6ffd
    name: argocd_dex_image
  - image: @sha256:53daa863b16b421cc1d9bc7e042cf1ecce9de9913b978561145b319c2a1a8ae5
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
    name: gitops-rhel8-operator-84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:84d4226e3490f4c0f04b936e01b3b772093084815530cae97b868f4bf8b47a46
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:ffbb287bde27ad176f9fe52b2cb52c323507c7d657be9d144e1d520c0415d3e9
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:19ae5ec397baead9627b61fb5802692b37148bacef897bbec829d92a6a8c67ef
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:7fb645f868c9bf88f8bc1b7c8ff65a991bb9e7030b005020c241cf67aa474b8a
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9e0fee30842a16d7b8a39d336123c80c5271cb2ceb50759fc7ee51a4ed09ceb3
    name: kube-rbac-proxy
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:decb4bc09753912d3d582093ce84548f507f6f7cc75f3f744a63130c0c323b46
name: openshift-gitops-operator.v1.14.2
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.14.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
        createdAt: "2024-11-15 04:13:36"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: ""
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n* Automated GitOps bootstrapping using Tekton and Argo CD with [GitOps Application Manager CLI](https://github.com/redhat-developer/kam)\n\n## Components\n* Argo CD 2.12.7\n* GitOps Application Manager CLI ([download](https://github.com/redhat-developer/kam/releases))\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: Release Notes
          url: https://docs.redhat.com/en/documentation/red_hat_openshift_gitops/
        - name: Day 1 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day1
        - name: Day 2 Operations
          url: https://github.com/redhat-developer/kam/tree/master/docs/journey/day2
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:384fc02125e83db1047480211392ed5ea29b4bc254a173cae347c71480a339ac
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:706d5c99715eece77616135da2fbf90863b7aef17fd64ab03bf7dd20877490ec
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:3e97d25ed7516393ce81ab61f1ed78842eb2b77ef5c7b50151b8a7c377a2a36b
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:5aad57bedf3a3e6b2f4c21446a4326efb76a16c6727a3d941e95fe60112580f2
    name: argocd_dex_image
  - image: @sha256:decb4bc09753912d3d582093ce84548f507f6f7cc75f3f744a63130c0c323b46
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
    name: gitops-rhel8-operator-73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:73f13a5587bbfbea5a64bd3507120eb83b6be85088139c6d65a9aa9cd56e186a
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:93698c7fe8c0d1120a9cc3e451c3d46adb3a60c0e0ba09cf06a3c83f915b9cdd
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/kam-delivery-rhel8@sha256:83817a6577eee2bcb954bbc05b3fdc68fb56f2f63cec99b4d0623c1b10eb44d7
    name: kam_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:0e4dee6469ff15e71c9925bebcb68510d2cb14662429f2bfea065bbc0b4cc316
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:3f2804bc2af437ff1f06c214b48a1a780dfcfab995650d901c03270057eb9f3c
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:a848cc4edb4405846c673187dd68ce66c328dd1ad42f193f5737288c7971399d
    name: argocd_redis_image
schema: olm.bundle
---
image: @sha256:c605145a2b2454c969e43b5d8390d29c932bb0eeb4ba2eb9f0c72d8c909ae8cb
name: openshift-gitops-operator.v1.15.0
package: openshift-gitops-operator
properties:
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisRun
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: AppProject
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Application
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ApplicationSet
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ArgoCD
      version: v1beta1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: ClusterAnalysisTemplate
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Experiment
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: NotificationsConfiguration
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: Rollout
      version: v1alpha1
  - type: olm.gvk
    value:
      group: argoproj.io
      kind: RolloutManager
      version: v1alpha1
  - type: olm.gvk
    value:
      group: pipelines.openshift.io
      kind: GitopsService
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-gitops-operator
      version: 1.15.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "AppProject",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "Application",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "ApplicationSet",
              "metadata": {
                "name": "example"
              },
              "spec": null
            },
            {
              "apiVersion": "argoproj.io/v1alpha1",
              "kind": "NotificationsConfiguration",
              "metadata": {
                "name": "default-notifications-configuration"
              },
              "spec": {
                "templates": {
                  "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                  "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                  "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                  "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                  "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                  "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                  "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                  "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                },
                "triggers": {
                  "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                  "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                  "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                  "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                  "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                  "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                  "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                  "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                }
              }
            },
            {
              "apiVersion": "argoproj.io/v1beta1",
              "kind": "ArgoCD",
              "metadata": {
                "name": "argocd"
              },
              "spec": {
                "controller": {
                  "resources": {
                    "limits": {
                      "cpu": "2000m",
                      "memory": "2048Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "1024Mi"
                    }
                  }
                },
                "ha": {
                  "enabled": false,
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "rbac": {
                  "defaultPolicy": "",
                  "policy": "g, system:cluster-admins, role:admin\n",
                  "scopes": "[groups]"
                },
                "redis": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "repo": {
                  "resources": {
                    "limits": {
                      "cpu": "1000m",
                      "memory": "1024Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "256Mi"
                    }
                  }
                },
                "resourceExclusions": "- apiGroups:\n  - tekton.dev\n  clusters:\n  - '*'\n  kinds:\n  - TaskRun\n  - PipelineRun        \n",
                "server": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "125m",
                      "memory": "128Mi"
                    }
                  },
                  "route": {
                    "enabled": true
                  }
                },
                "sso": {
                  "dex": {
                    "openShiftOAuth": true,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "provider": "dex"
                }
              }
            },
            {
              "apiVersion": "pipelines.openshift.io/v1alpha1",
              "kind": "GitopsService",
              "metadata": {
                "name": "gitopsservice-sample"
              },
              "spec": null
            }
          ]
        capabilities: Deep Insights
        console.openshift.io/plugins: '["gitops-plugin"]'
        containerImage: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
        createdAt: "2024-12-11 20:11:50"
        description: Enables teams to adopt GitOps principles for managing cluster configurations and application delivery across hybrid multi-cluster Kubernetes environments.
        features.operators.openshift.io/disconnected: "true"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "true"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        olm.skipRange: '>=1.0.0 <1.15.0'
        operatorframework.io/cluster-monitoring: "true"
        operatorframework.io/suggested-namespace: openshift-gitops-operator
        operators.openshift.io/infrastructure-features: '["disconnected"]'
        operators.openshift.io/valid-subscription: '["OpenShift Container Platform", "OpenShift Platform Plus"]'
        operators.operatorframework.io/builder: operator-sdk-v1.35.0
        operators.operatorframework.io/internal-objects: '["gitopsservices.pipelines.openshift.io"]'
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
        repository: https://github.com/redhat-developer/gitops-operator
        support: Red Hat
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: An AnalysisRun is an instantiation of an AnalysisTemplate. AnalysisRuns are like Jobs in that they eventually complete.
            displayName: AnalysisRun
            kind: AnalysisRun
            name: analysisruns.argoproj.io
            version: v1alpha1
          - description: An AnalysisTemplate is a template spec which defines how to perform a canary analysis, such as the metrics, its frequency, and the values which are considered successful or failed.
            displayName: AnalysisTemplate
            kind: AnalysisTemplate
            name: analysistemplates.argoproj.io
            version: v1alpha1
          - description: An Application is a group of Kubernetes resources as defined by a manifest.
            displayName: Application
            kind: Application
            name: applications.argoproj.io
            version: v1alpha1
          - description: ApplicationSet is the representation of an ApplicationSet controller deployment.
            displayName: ApplicationSet
            kind: ApplicationSet
            name: applicationsets.argoproj.io
            version: v1alpha1
          - description: An AppProject is a logical grouping of Argo CD Applications.
            displayName: AppProject
            kind: AppProject
            name: appprojects.argoproj.io
            version: v1alpha1
          - kind: ArgoCD
            name: argocds.argoproj.io
            version: v1alpha1
          - description: Argo CD is the representation of an Argo CD deployment.
            displayName: Argo CD
            kind: ArgoCD
            name: argocds.argoproj.io
            resources:
              - kind: ArgoCD
                name: ""
                version: v1beta1
              - kind: ConfigMap
                name: ""
                version: v1
              - kind: CronJob
                name: ""
                version: v1
              - kind: Deployment
                name: ""
                version: v1
              - kind: Ingress
                name: ""
                version: v1
              - kind: Job
                name: ""
                version: v1
              - kind: PersistentVolumeClaim
                name: ""
                version: v1
              - kind: Pod
                name: ""
                version: v1
              - kind: Prometheus
                name: ""
                version: v1
              - kind: ReplicaSet
                name: ""
                version: v1
              - kind: Route
                name: ""
                version: v1
              - kind: Secret
                name: ""
                version: v1
              - kind: Service
                name: ""
                version: v1
              - kind: ServiceMonitor
                name: ""
                version: v1
              - kind: StatefulSet
                name: ""
                version: v1
            version: v1beta1
          - description: A ClusterAnalysisTemplate is like an AnalysisTemplate,but it is not limited to its namespace. It can be used by any Rollout throughout the cluster.
            displayName: ClusterAnalysisTemplate
            kind: ClusterAnalysisTemplate
            name: clusteranalysistemplates.argoproj.io
            version: v1alpha1
          - description: An Experiment is limited run of one or more ReplicaSets for the purposes of analysis. Experiments typically run for a pre-determined duration, but can also run indefinitely until stopped.
            displayName: Experiment
            kind: Experiment
            name: experiments.argoproj.io
            version: v1alpha1
          - description: GitopsService is the Schema for the gitopsservices API
            displayName: Gitops Service
            kind: GitopsService
            name: gitopsservices.pipelines.openshift.io
            version: v1alpha1
          - description: NotificationsConfigurations contains the notification template used to generate notifications that notify users about important changes in the application state.
            displayName: NotificationsConfiguration
            kind: NotificationsConfiguration
            name: notificationsconfigurations.argoproj.io
            version: v1alpha1
          - description: A controller for managing Argo Rollouts
            displayName: RolloutManager
            kind: RolloutManager
            name: rolloutmanagers.argoproj.io
            version: v1alpha1
          - kind: Rollout
            name: rollouts.argoproj.io
            version: v1alpha1
      description: "Red Hat OpenShift GitOps is a declarative continuous delivery platform based on [Argo CD](https://argoproj.github.io/argo-cd/). It enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. Following GitOps and infrastructure as code principles, you can store the configuration of clusters and applications in Git repositories and use Git workflows to roll them out to the target clusters.\n\n## Features\n* Automated install and upgrades of Argo CD\n* Manual and automated configuration sync from Git repositories to target OpenShift and Kubernetes clusters\n* Support for the Helm and Kustomize templating tools\n* Configuration drift detection and visualization on live clusters\n* Audit trails of rollouts to the clusters\n* Monitoring and logging integration with OpenShift\n##Components\n* Argo CD stable\n\n## How to Install \nAfter installing the OpenShift GitOps operator, an instance  of Argo CD is installed in the `openshift-gitops` namespace which has sufficent privileges for managing cluster configurations. You can create additional Argo CD instances using the `ArgoCD` custom resource within the desired namespaces.\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd\nspec:\n  server:\n    route:\n      enabled: true\n```\n\nOpenShift GitOps is a layered product on top of OpenShift that enables teams to adopt GitOps principles for managing cluster configurations and automating secure and repeatable application delivery across hybrid multi-cluster Kubernetes environments. OpenShift GitOps is built around Argo CD as the core upstream project and assists customers to establish an end-to-end application delivery workflow on GitOps principles.\n"
      displayName: Red Hat OpenShift GitOps
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - devtools
        - gitops
        - pipelines
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      maintainers:
        - email: team-gitops@redhat.com
          name: OpenShift GitOps Team
      maturity: GA
      provider:
        name: Red Hat Inc
relatedImages:
  - image: registry.redhat.io/openshift-gitops-1/argo-rollouts-rhel8@sha256:c698338c0b8c593cd6e79101b929543c5222b3bd09978d6a8f72095f10fd28c0
    name: argo_rollouts_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-extensions-rhel8@sha256:6bfd32f9757aab4ec33b37a75f25ebaec7a18a00ece57a8d815cc6183854395b
    name: argocd_extension_image
  - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:2808a4a071a0ffa6960e40cdec1d2d2905d6116fe26c553612edabc7c2235a34
    name: argocd_image
  - image: registry.redhat.io/openshift-gitops-1/console-plugin-rhel8@sha256:d78477703b0cd801715fd9ad785986dd64f9937536ea40596c1441e6979a5a98
    name: gitops_console_plugin_image
  - image: registry.redhat.io/openshift-gitops-1/dex-rhel8@sha256:d25c69ecbc7254d09ff3974ec741c290d19af7803e659feaa07b3098d9fec4dc
    name: argocd_dex_image
  - image: @sha256:c605145a2b2454c969e43b5d8390d29c932bb0eeb4ba2eb9f0c72d8c909ae8cb
    name: ""
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
    name: gitops-rhel8-operator-2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f-annotation
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8-operator@sha256:2a18db52d160d864f06acf9f995212779fb7c7ecd113363ef7205a7509d80c7f
    name: manager
  - image: registry.redhat.io/openshift-gitops-1/gitops-rhel8@sha256:e8929708ec39a24ebf7c746bb1e767ad10a1ee11b10b1324b81895daf8859d1c
    name: backend_image
  - image: registry.redhat.io/openshift-gitops-1/must-gather-rhel8@sha256:43e347a90fd890601d1a5fe4536e8138615251bba584c7b8881ce7bb5ab090bd
    name: must_gather_image
  - image: registry.redhat.io/openshift4/ose-haproxy-router@sha256:7c6bb4a525964d9cdf1c64c646174f91273501dea93224cab5382f81533c6642
    name: argocd_redis_ha_proxy_image
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:3f2804bc2af437ff1f06c214b48a1a780dfcfab995650d901c03270057eb9f3c
    name: kube-rbac-proxy
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6a90baa81d2272e681a16a91deacdc1c212b00142b0d9736aff14f772f68be11
    name: kube_rbac_proxy_image
  - image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8@sha256:06a6637c4776f4285bcb295d327ee60b1aed61b7adc5f7ab52898d79281ced70
    name: argocd_keycloak_image
  - image: registry.redhat.io/rhel8/redis-6@sha256:5250d644e80aea794b0f732e9285883a4348dace83557f177f64d78fe4dcabd0
    name: argocd_redis_image
schema: olm.bundle
